// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact

const truffleAssert = require('truffle-assertions');

var SupplyChain = artifacts.require('SupplyChain');

contract('SupplyChain', function (accounts) {
  // Declare few constants and assign a few sample accounts generated by ganache-cli
  var sku = 1;
  var upc = 1;
  const ownerID = accounts[0];
  const originFarmerID = accounts[1];
  const originFarmName = 'John Doe';
  const originFarmInformation = 'Yarray Valley';
  const originFarmLatitude = '-38.239770';
  const originFarmLongitude = '144.341490';
  var productID = sku + upc;
  const productNotes = 'Best beans for Espresso...';
  const productPrice = web3.utils.toWei('1', 'ether');
  var itemState = 0;
  const distributorID = accounts[2];
  const retailerID = accounts[3];
  const consumerID = accounts[4];
  const anybodyID = accounts[5];
  const emptyAddress = '0x00000000000000000000000000000000000000';

  ///Available Accounts
  ///==================
  ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
  ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
  ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
  ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
  ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
  ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
  ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
  ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
  ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
  ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

  console.log('ganache-cli accounts used here...');
  console.log('Contract Owner: accounts[0] ', accounts[0]);
  console.log('Farmer: accounts[1] ', accounts[1]);
  console.log('Distributor: accounts[2] ', accounts[2]);
  console.log('Retailer: accounts[3] ', accounts[3]);
  console.log('Consumer: accounts[4] ', accounts[4]);

  // 1st Test :: HARVEST
  it('HARVEST :: Testing smart contract function harvestItem() that allows a farmer to harvest coffee', async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    var eventEmitted = false;

    supplyChain.contract.events.Harvested({}, function (error, event) {
      eventEmitted = true;
    });

    // Mark an item as Harvested by calling function harvestItem()
    await supplyChain.harvestItem(
      upc,
      originFarmerID,
      originFarmName,
      originFarmInformation,
      originFarmLatitude,
      originFarmLongitude,
      productNotes
    );

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
    assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');
    //
    assert.equal(resultBufferTwo[0], sku, 'Error resultBufferTwo: Invalid item SKU');
    assert.equal(resultBufferTwo[1], upc, 'Error resultBufferTwo: Invalid item UPC');
    assert.equal(resultBufferTwo[4], 0, 'Error resultBufferTwo: Invalid price');

    assert.equal(resultBufferTwo[5], 0, 'Error resultBufferTwo: Invalid item State');
    assert.equal(eventEmitted, true, 'Invalid event emitted');
  });

  //
  // 2nd Test :: PROCESS
  //
  it('PROCESS :: Testing smart contract function processItem() that allows a farmer to process coffee', async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let processEventEmitted = false;

    // Watch the emitted event Processed()
    supplyChain.contract.events.Processed({}, function (error, event) {
      processEventEmitted = true;
    });

    let currentState = await supplyChain.getState(upc);
    assert.equal(currentState, 'Harvested', 'Current state (before)');

    // Mark an item as Processed by calling function processtItem()
    await supplyChain.processItem(upc, {
      from: originFarmerID
    });

    currentState = await supplyChain.getState(upc);
    assert.equal(currentState, 'Processed', 'Current state (after)');

    assert.equal(processEventEmitted, true, 'Processed event not emitted!');

    // Retrieve the just now saved item from blockchain by calling function fetchItem()
    const resultBufferOne = await supplyChain.fetchItemBufferOne(upc, {
      from: originFarmerID
    });
    const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc, {
      from: originFarmerID
    });

    // Verify the result set
    assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
    assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
    assert.equal(resultBufferOne[2], originFarmerID, 'Error: Missing or Invalid ownerID');
    assert.equal(resultBufferOne[3], originFarmerID, 'Error: Missing or Invalid originFarmerID');
    assert.equal(resultBufferOne[4], originFarmName, 'Error: Missing or Invalid originFarmName');
    assert.equal(resultBufferOne[5], originFarmInformation, 'Error: Missing or Invalid originFarmInformation');
    assert.equal(resultBufferOne[6], originFarmLatitude, 'Error: Missing or Invalid originFarmLatitude');
    assert.equal(resultBufferOne[7], originFarmLongitude, 'Error: Missing or Invalid originFarmLongitude');

    //
    assert.equal(resultBufferTwo[0], sku, 'Error resultBufferTwo: Invalid item SKU');
    assert.equal(resultBufferTwo[1], upc, 'Error resultBufferTwo: Invalid item UPC');
    assert.equal(resultBufferTwo[4], 0, 'Error resultBufferTwo: Invalid price');
  });

  //
  // 3rd Test :: PACK
  //
  it('PACK :: Testing smart contract function packItem() that allows a farmer to pack coffee', async () => {
    const supplyChain = await SupplyChain.deployed();

    // Declare and Initialize a variable for event
    let eventEmitted = false;
    supplyChain.contract.events.Packed({}, function (error, event) {
      eventEmitted = true;
    });

    let currentState = await supplyChain.getState(upc);
    assert.equal(currentState, 'Processed', 'Current state (before)');

    // Mark an item as Packed by calling function packItem()
    await supplyChain.packItem(upc, { from: originFarmerID });

    currentState = await supplyChain.getState(upc);
    assert.equal(currentState, 'Packed', 'Current state (after)');

    assert.equal(eventEmitted, true, 'Processed event not emitted!');
  });

  //
  // 4th Test :: SELL
  //
  it('SELL :: Testing smart contract function sellItem() that allows a farmer to sell coffee', async () => {
    const supplyChain = await SupplyChain.deployed();
    let currentState = await supplyChain.getState(upc);
    assert.equal(currentState, 'Packed', 'Current state (before)');

    let eventEmitted = false;
    supplyChain.contract.events.ForSale({}, function (error, event) {
      eventEmitted = true;
    });

    await supplyChain.sellItem(upc, 12, { from: originFarmerID });

    currentState = await supplyChain.getState(upc);
    assert.equal(currentState, 'ForSale', 'Current state (after)');

    assert.equal(eventEmitted, true, 'Processed event not emitted!');
  });

  // 5th Test :: SOLD
  it('SOLD :: Testing smart contract function buyItem() that allows a distributor to buy coffee', async () => {
    const supplyChain = await SupplyChain.deployed();
    let eventEmitted = false;
    supplyChain.contract.events.Sold({}, function (error, event) {
      eventEmitted = true;
    });

    await supplyChain.addDistributor(distributorID, { from: ownerID });

    let ethBefore = await web3.eth.getBalance(originFarmerID);

    await supplyChain.buyItem(upc, {
      from: distributorID,
      value: 1.5 * web3.utils.toWei('1', 'ether')
    });

    // Retrieve the just now saved item from blockchain by calling function fetchItem()

    // Verify the result set
  });

  // 6th Test :: SHIPPED
  it('SHIPPED :: Testing smart contract function shipItem() that allows a distributor to ship coffee', async () => {
    const supplyChain = await SupplyChain.deployed();
    let eventEmitted = false;
    supplyChain.contract.events.Shipped({}, function (error, event) {
      eventEmitted = true;
    });

    await supplyChain.shipItem(upc, {
      from: distributorID
    });

    currentState = await supplyChain.getState(upc);
    assert.equal(currentState, 'Shipped', 'Current state (after)');
    assert.equal(eventEmitted, true, 'Processed event not emitted!');
  });

  // 7th Test :: RECEIVED
  it('RECEIVED :: Testing smart contract function receiveItem() that allows a retailer to mark coffee received', async () => {
    const supplyChain = await SupplyChain.deployed();

    await supplyChain.addRetailer(retailerID, { from: ownerID });

    let eventEmitted = false;
    supplyChain.contract.events.Shipped({}, function (error, event) {
      eventEmitted = true;
    });

    await supplyChain.receiveItem(upc, {
      from: retailerID
    });

    currentState = await supplyChain.getState(upc);
    assert.equal(currentState, 'Received', 'Current state (after)');

    assert.equal(eventEmitted, true, 'Processed event not emitted!');
  });

  // 8th Test
  it('PURCHASED :: Testing smart contract function purchaseItem() that allows a consumer to purchase coffee', async () => {
    const supplyChain = await SupplyChain.deployed();

    await supplyChain.addConsumer(consumerID, { from: ownerID });

    let eventEmitted = false;
    supplyChain.contract.events.Purchased({}, function (error, event) {
      eventEmitted = true;
    });

    await supplyChain.purchaseItem(upc, {
      from: consumerID
    });

    currentState = await supplyChain.getState(upc);
    assert.equal(currentState, 'Purchased', 'Current state (after)');

    assert.equal(eventEmitted, true, 'Processed event not emitted!');
  });

  // 9th Test
  it('FETCHITEMBUFFERONE :: Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain', async () => {
    const supplyChain = await SupplyChain.deployed();

    let itemOne = await supplyChain.fetchItemBufferOne(upc, {
      from: anybodyID
    });
    assert.equal(itemOne.itemSKU, 1, 'Check itemSKU');
    // Verify the result set:
  });

  // 10th Test
  it('Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain', async () => {
    const supplyChain = await SupplyChain.deployed();

    let itemOne = await supplyChain.fetchItemBufferTwo(upc, {
      from: anybodyID
    });

    assert.equal(itemOne.itemState, 7, 'Final Item State');
    // Verify the result set:
  });
});
