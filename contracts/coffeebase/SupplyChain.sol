pragma solidity ^0.4.24;

import "../coffeeaccesscontrol/FarmerRole.sol";
import "../coffeeaccesscontrol/RetailerRole.sol";
import "../coffeeaccesscontrol/DistributorRole.sol";
import "../coffeeaccesscontrol/ConsumerRole.sol";
import "../coffeecore/Ownable.sol";

// import "../coffeecore/Ownable.sol";
// Define a contract 'Supplychain'
contract SupplyChain is FarmerRole, RetailerRole, DistributorRole, ConsumerRole, Ownable

{

    // Define a variable called 'upc' for Universal Product Code (UPC)
    uint  upc;

    // Define a variable called 'sku' for Stock Keeping Unit (SKU)
    uint  sku;

    // Define enum 'State' with the following values:
    enum State
    {
        Harvested, // 0
        Processed, // 1
        Packed, // 2
        ForSale, // 3
        Sold, // 4
        Shipped, // 5
        Received, // 6
        Purchased   // 7
    }



    State constant defaultState = State.Harvested;

    // Define a struct 'Item' with the following fields:
    struct Item {
        uint sku;  // Stock Keeping Unit (SKU)
        uint upc; // Universal Product Code (UPC), generated by the Farmer, goes on the package, can be verified by the Consumer
        address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
        address originFarmerID; // Metamask-Ethereum address of the Farmer
        string originFarmName; // Farmer Name
        string originFarmInformation;  // Farmer Information
        string originFarmLatitude; // Farm Latitude
        string originFarmLongitude;  // Farm Longitude
        uint productID;  // Product ID potentially a combination of upc + sku
        string productNotes; // Product Notes
        uint productPrice; // Product Price
        State itemState;  // Product State as represented in the enum above
        address distributorID;  // Metamask-Ethereum address of the Distributor
        address retailerID; // Metamask-Ethereum address of the Retailer
        address consumerID; // Metamask-Ethereum address of the Consumer
        string productImageHash;  // Farmer Information
    }

    // Define a public mapping 'items' that maps the UPC to an Item.
    mapping(uint => Item) items;

    // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
    // that track its journey through the supply chain -- to be sent from DApp.
    mapping(uint => string[]) itemsHistory;


    // Define 8 events with the same 8 state values and accept 'upc' as input argument
    event Harvested(uint upc);
    event NewProductID(uint productID);
    event Processed(uint upc);
    event Packed(uint upc);
    event ForSale(uint upc);
    event Sold(uint upc);
    event Shipped(uint upc);
    event Received(uint upc);
    event Purchased(uint upc);


    // Define a modifer that verifies the Caller
    modifier verifyCaller (address _address) {
        require(msg.sender == _address);
        _;
    }

    // Define a modifier that checks if the paid amount is sufficient to cover the price
    modifier paidEnough(uint _price) {
        require(msg.value >= _price, 'Paid not enough for the Item!');
        _;
    }

    // Define a modifier that checks the price and refunds the remaining balance
    modifier checkValue(uint _upc) {
        _;
        uint _price = items[_upc].productPrice;
        uint amountToReturn = msg.value - _price;
        msg.sender.transfer(amountToReturn);
    }

    // Define a modifier that checks if an item.state of a upc is Harvested
    modifier harvested(uint _upc) {
        require(items[_upc].itemState == State.Harvested, 'Harvested status not met!');
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Processed
    modifier processed(uint _upc) {
        require(items[_upc].itemState == State.Processed, 'Processed status not met!');
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Packed
    modifier packed(uint _upc) {
        require(items[_upc].itemState == State.Packed, 'Packed status not met!');
        _;
    }

    // Define a modifier that checks if an item.state of a upc is ForSale
    modifier forSale(uint _upc) {
        require(items[_upc].itemState == State.ForSale, 'ForSale status not met!');
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Sold
    modifier sold(uint _upc) {
        require(items[_upc].itemState == State.Sold, 'Sold status not met!');
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Shipped
    modifier shipped(uint _upc) {
        require(items[_upc].itemState == State.Shipped, 'Shipped status not met!');
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Received
    modifier received(uint _upc) {
        require(items[_upc].itemState == State.Received, 'Received status not met!');
        _;
    }

    // Define a modifier that checks if an item.state of a upc is Purchased
    modifier purchased(uint _upc) {
        require(items[_upc].itemState == State.Purchased, 'Purchased status not met!');
        _;
    }

    // In the constructor set 'owner' to the address that instantiated the contract
    // and set 'sku' to 1
    // and set 'upc' to 1
    constructor() public Ownable() {
        sku = 1;
        upc = 1;
    }

    // Define a function 'kill' if required


    function getState(uint _upc) public view returns (string memory)
    {
        return _toStateString(items[_upc].itemState);
    }

    function _toStateString(State _state) public pure returns (string memory) {
        // Loop through possible options
        if (_state == State.Harvested) return "Harvested";
        if (_state == State.Processed) return "Processed";
        if (_state == State.Packed) return "Packed";
        if (_state == State.ForSale) return "ForSale";
        if (_state == State.Sold) return "Sold";
        if (_state == State.Shipped) return "Shipped";
        if (_state == State.Received) return "Received";
        if (_state == State.Purchased) return "Purchased";
        return '';
    }


    // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
    function harvestItem(uint _upc, address _originFarmerID, string _originFarmName, string _originFarmInformation,
        string _originFarmLatitude, string _originFarmLongitude, string _productNotes, string _productImageHash) public
    {
        uint _productID = _upc + sku;
        items[_upc] = Item(sku,
            _upc,
            _originFarmerID,
            _originFarmerID, // Metamask-Ethereum address of the Farmer
            _originFarmName, // Farmer Name
            _originFarmInformation, // Farmer Information
            _originFarmLatitude, // Farm Latitude
            _originFarmLongitude, // Farm Longitude
            _productID, // Product ID potentially a combination of upc + sku
            _productNotes, // Product Notes
            uint(0), // Product Price
            State.Harvested, // Product State as represented in the enum above
            address(0), // Metamask-Ethereum address of the Distributor
            address(0), // Metamask-Ethereum address of the Retailer
            address(0), // Metamask-Ethereum address of the Consumer);
            _productImageHash
        );
        if (!isFarmer(_originFarmerID)) {
            addFarmer(_originFarmerID);
        }
        sku = sku + 1;
        emit Harvested(_upc);
        emit NewProductID(_productID);
    }


    function processItem(uint _upc) public
    harvested(_upc)
    onlyFarmer
    {
        Item storage item = items[_upc];
        require(item.originFarmerID == msg.sender, 'Origin Farmer ID does not match sender address!');
        item.itemState = State.Processed;
        require(item.itemState == State.Processed, 'Could not change item state!');
        emit Processed(_upc);
    }

    function packItem(uint _upc) public
    processed(_upc)
    onlyFarmer
    {
        Item storage item = items[_upc];
        require(item.originFarmerID == msg.sender, 'Origin Farmer ID does not match sender address!');
        item.itemState = State.Packed;
        require(item.itemState == State.Packed, 'Could not change item state!');
        emit Packed(upc);
    }

    function sellItem(uint _upc, uint _price) public
    packed(_upc)
    onlyFarmer
    {
        Item storage item = items[_upc];
        require(item.originFarmerID == msg.sender);
        item.productPrice = _price;
        item.itemState = State.ForSale;
        require(item.itemState == State.ForSale, 'Could not change item state!');
        emit ForSale(upc);
    }

    function buyItem(uint _upc) public payable
    forSale(_upc)
    onlyDistributor
    paidEnough(_upc)
    checkValue(_upc)
    {
        Item storage item = items[_upc];
        item.ownerID = msg.sender;
        item.distributorID = msg.sender;
        item.itemState = State.Sold;
        item.originFarmerID.transfer(item.productPrice);
        emit Sold(upc);
    }

    function shipItem(uint _upc) public
    sold(_upc)
    onlyDistributor
    {
        Item storage item = items[_upc];
        item.distributorID = msg.sender;
        item.itemState = State.Shipped;
        emit Shipped(_upc);
    }

    function receiveItem(uint _upc) public
    shipped(_upc)
    onlyRetailer
    {
        Item storage item = items[_upc];
        item.itemState = State.Received;
        item.ownerID = msg.sender;
        item.retailerID = msg.sender;
        emit Received(_upc);

    }

    function purchaseItem(uint _upc) public
    received(_upc)
    onlyConsumer
    {
        Item storage item = items[_upc];
        item.itemState = State.Purchased;
        item.ownerID = msg.sender;
        item.consumerID = msg.sender;
        emit Purchased(_upc);
    }

    // Define a function 'fetchItemBufferOne' that fetches the data
    function fetchItemBufferOne(uint _upc) public view returns
    (
        uint itemSKU,
        uint itemUPC,
        address ownerID,
        address originFarmerID,
        string originFarmName,
        string originFarmInformation,
        string originFarmLatitude,
        string originFarmLongitude,
        string productImageHash
    )
    {
        // Assign values to the 8 parameters
        Item memory item = items[_upc];

        return
        (item.sku,
        item.upc,
        item.ownerID,
        item.originFarmerID,
        item.originFarmName,
        item.originFarmInformation,
        item.originFarmLatitude,
        item.originFarmLongitude,
        item.productImageHash);
    }

    // Define a function 'fetchItemBufferTwo' that fetches the data
    function fetchItemBufferTwo(uint _upc) public view returns
    (
        uint itemSKU,
        uint itemUPC,
        uint productID,
        string productNotes,
        uint productPrice,
        uint itemState,
        address distributorID,
        address retailerID,
        address consumerID
    )
    {
        // Assign values to the 9 parameters
        Item memory item = items[_upc];
        itemSKU = item.sku;
        itemUPC = item.upc;
        productID = item.productID;
        productNotes = item.productNotes;
        productPrice = item.productPrice;
        itemState = uint(item.itemState);
        distributorID = item.distributorID;
        retailerID = item.retailerID;
        consumerID = item.consumerID;
        return;
    }

    // Test if the provided upc already is used
    function isUpcExists(uint _upc) public view returns (bool) {
        Item memory item = items[_upc];
        if (item.upc != 0) {
            return true;
        }
        return false;
    }


}
